{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.5.2"},"colab":{"name":"syntax_parsing.ipynb","provenance":[{"file_id":"1qrzLlSWy671sftpkjLikyotoUedcUGfl","timestamp":1636548128344}]}},"cells":[{"cell_type":"markdown","metadata":{"id":"DodcVA8wqx-a"},"source":["# Depencency parsing\n","(парсинг зависимостей)\n","\n","### Что это?\n","\n","* наша цель -- представить предложение естественного языка в виде дерева\n","* слова предложения -- вершины; *зависимости (dependencies)* между ними -- рёбра\n","* зависимости могут быть разными: например, субъект глагола, объект глагола, прилагательное-модификатор, и так далее\n","\n","### Формат\n","\n","Существует несколько форматов записи деревьев зависимостей, но самый популярный и общеиспользуемый -- [CoNLL-U](http://universaldependencies.org/format.html).<br/>\n","Как это выглядит (пример из [русского Universal Dependency трибанка](https://github.com/UniversalDependencies/UD_Russian-SynTagRus)):"]},{"cell_type":"code","metadata":{"id":"loKDmgMwqx-c"},"source":["my_example = \"\"\"\n","# sent_id = 2003Armeniya.xml_138\n","# text = Перспективы развития сферы высоких технологий.\n","1\tПерспективы\tперспектива\tNOUN\t_\tAnimacy=Inan|Case=Nom|Gender=Fem|Number=Plur\t0\tROOT\t0:root\t_\n","2\tразвития\tразвитие\tNOUN\t_\tAnimacy=Inan|Case=Gen|Gender=Neut|Number=Sing\t1\tnmod\t1:nmod\t_\n","3\tсферы\tсфера\tNOUN\t_\tAnimacy=Inan|Case=Gen|Gender=Fem|Number=Sing\t2\tnmod\t2:nmod\t_\n","4\tвысоких\tвысокий\tADJ\t_\tCase=Gen|Degree=Pos|Number=Plur\t5\tamod\t5:amod\t_\n","5\tтехнологий\tтехнология\tNOUN\t_\tAnimacy=Inan|Case=Gen|Gender=Fem|Number=Plur\t3\tnmod\t3:nmod\tSpaceAfter=No\n","6\t.\t.\tPUNCT\t_\t_\t1\tpunct\t1:punct\t_\n","\"\"\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vyKBr0Epqx-h"},"source":["Комментарии + таблица c 9 колонками (разделители табы):\n","* ID\n","* FORM: токен\n","* LEMMA: начальная форма\n","* UPOS: универсальная часть речи\n","* XPOS: лингво-специфичная часть речи\n","* FEATS: морфологическая информация: падеж, род, число etc\n","* HEAD: id ролителя\n","* DEPREL: тип зависимости, то есть отношение к токену-родителю\n","* DEPS: альтернативный подграф (не будем углубляться :))\n","* MISC: всё остальное\n","\n","Отсутствующие данные представляются с помощью `_`. Больше подробностей про формат -- в [официальной документаци](http://universaldependencies.org/format.html).<br>\n","User-friendly визуализация: ![2003Armeniya.xml_138](rus_tree.png)\n","\n","Отрытый инструмент для визуализации, ручной разметки и конвертации в другие форматы: UD Annotatrix. [Online-интерфейс](https://universal-dependencies.linghub.net/annotatrix), [репозиторий](https://github.com/jonorthwash/ud-annotatrix).\n","\n","Трибанк -- много таких предложений. Обычно они разделяются двумя переносами строки.\n","### Как считывать данные в питоне\n","\n","Используем библиотеку [conllu](https://github.com/EmilStenstrom/conllu)."]},{"cell_type":"code","metadata":{"id":"dBrJatudq231","colab":{"base_uri":"https://localhost:8080/","height":106},"executionInfo":{"status":"ok","timestamp":1569788234878,"user_tz":-180,"elapsed":5347,"user":{"displayName":"Мария Шеянова","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mD0HLmel66wCQ2LALQesDMMokfEXTr_sSERNbqUsw=s64","userId":"13414369628864094336"}},"outputId":"22e7ed25-65fa-4d4b-9815-24d5dd572cbd"},"source":["!pip install conllu"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting conllu\n","  Downloading https://files.pythonhosted.org/packages/9e/34/ddfbf22e7477a75ca609d60a831452439383e4ab61bed2b5a1b83d1eef5b/conllu-2.0-py2.py3-none-any.whl\n","Installing collected packages: conllu\n","Successfully installed conllu-2.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VJiVHYQmqx-i"},"source":["from conllu import parse"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"y3VpusyVqx-m","outputId":"a75720e3-62e0-4364-ba60-9d325a69988c"},"source":["help(parse)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Help on function parse in module conllu:\n","\n","parse(data, fields=None, field_parsers=None)\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"E4n9qIIHqx-q","colab":{"base_uri":"https://localhost:8080/","height":257},"executionInfo":{"status":"ok","timestamp":1569788254005,"user_tz":-180,"elapsed":619,"user":{"displayName":"Мария Шеянова","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mD0HLmel66wCQ2LALQesDMMokfEXTr_sSERNbqUsw=s64","userId":"13414369628864094336"}},"outputId":"76305cd8-bf67-4fc8-9cff-0f6978b8483a"},"source":["sentences = parse(my_example)\n","sentence = sentences[0]\n","sentence[0]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["OrderedDict([('id', 1),\n","             ('form', 'Перспективы'),\n","             ('lemma', 'перспектива'),\n","             ('upostag', 'NOUN'),\n","             ('xpostag', None),\n","             ('feats',\n","              OrderedDict([('Animacy', 'Inan'),\n","                           ('Case', 'Nom'),\n","                           ('Gender', 'Fem'),\n","                           ('Number', 'Plur')])),\n","             ('head', 0),\n","             ('deprel', 'ROOT'),\n","             ('deps', '0:root'),\n","             ('misc', None)])"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"muRdkQvaqx-u","outputId":"7be686b2-6691-4c66-c699-fb0ec6ce0ad4"},"source":["sentence[-1]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["OrderedDict([('id', 6),\n","             ('form', '.'),\n","             ('lemma', '.'),\n","             ('upostag', 'PUNCT'),\n","             ('xpostag', None),\n","             ('feats', None),\n","             ('head', 1),\n","             ('deprel', 'punct'),\n","             ('deps', [('punct', 1)]),\n","             ('misc', None)])"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"hT6Toa2Bqx-y"},"source":["## Визуализация\n","\n","В nltk есть DependencyGraph, который умеет рисовать деревья (и ещё многое другое). Для того, чтобы визуализация работала корректно, ему нужна зависимость: graphviz.\n","\n","```\n","sudo apt-get install graphviz\n","pip3 install graphviz\n","```"]},{"cell_type":"code","metadata":{"id":"VR__FvNMq_7i","colab":{"base_uri":"https://localhost:8080/","height":103},"executionInfo":{"status":"ok","timestamp":1569788279986,"user_tz":-180,"elapsed":4761,"user":{"displayName":"Мария Шеянова","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mD0HLmel66wCQ2LALQesDMMokfEXTr_sSERNbqUsw=s64","userId":"13414369628864094336"}},"outputId":"97702e13-1e81-427b-e0a3-6d185b1cb34d"},"source":["!apt-get install graphviz"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Reading package lists... Done\n","Building dependency tree       \n","Reading state information... Done\n","graphviz is already the newest version (2.40.1-2).\n","0 upgraded, 0 newly installed, 0 to remove and 8 not upgraded.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ODQbzHf4rCmV","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1569788291708,"user_tz":-180,"elapsed":4060,"user":{"displayName":"Мария Шеянова","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mD0HLmel66wCQ2LALQesDMMokfEXTr_sSERNbqUsw=s64","userId":"13414369628864094336"}},"outputId":"aade8594-4fb2-4700-b7d1-f5ec1e08577a"},"source":["!pip install graphviz"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: graphviz in /usr/local/lib/python3.6/dist-packages (0.10.1)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"3tuRgluBqx-z"},"source":["from nltk import DependencyGraph"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"njDeAq80qx-3"},"source":["В отличие от `conllu`, `DependencyGraph` не справляется с комментариями, поэтому придётся их убрать. Кроме того ему обязательно нужен `deprel` *ROOT* в верхнем регистре, иначе он не находит корень."]},{"cell_type":"code","metadata":{"id":"yVuNMWdGqx-3"},"source":["sents = []\n","for sent in my_example.split('\\n\\n'):\n","    # убираем коменты\n","    sent = '\\n'.join([line for line in sent.split('\\n') if not line.startswith('#')])\n","    # заменяем deprel для root\n","    sent = sent.replace('\\troot\\t', '\\tROOT\\t')\n","    sents.append(sent)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"v9MhQKS4qx-6","colab":{"base_uri":"https://localhost:8080/","height":659},"executionInfo":{"status":"ok","timestamp":1569788352650,"user_tz":-180,"elapsed":943,"user":{"displayName":"Мария Шеянова","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mD0HLmel66wCQ2LALQesDMMokfEXTr_sSERNbqUsw=s64","userId":"13414369628864094336"}},"outputId":"f4ad877b-a5e9-4cd7-9da1-736a059f8b87"},"source":["graph = DependencyGraph(tree_str=sents[0])\n","graph"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<DependencyGraph with 7 nodes>"],"image/svg+xml":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.40.1 (20161225.0304)\n -->\n<!-- Title: G Pages: 1 -->\n<svg width=\"180pt\" height=\"479pt\"\n viewBox=\"0.00 0.00 179.50 479.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 475)\">\n<title>G</title>\n<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-475 175.5,-475 175.5,4 -4,4\"/>\n<!-- 0 -->\n<g id=\"node1\" class=\"node\">\n<title>0</title>\n<text text-anchor=\"middle\" x=\"98.5\" y=\"-449.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">0 (None)</text>\n</g>\n<!-- 1 -->\n<g id=\"node2\" class=\"node\">\n<title>1</title>\n<text text-anchor=\"middle\" x=\"98.5\" y=\"-362.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">1 (Перспективы)</text>\n</g>\n<!-- 0&#45;&gt;1 -->\n<g id=\"edge1\" class=\"edge\">\n<title>0&#45;&gt;1</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M98.5,-434.9735C98.5,-423.1918 98.5,-407.5607 98.5,-394.1581\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"102.0001,-394.0033 98.5,-384.0034 95.0001,-394.0034 102.0001,-394.0033\"/>\n<text text-anchor=\"middle\" x=\"118.5\" y=\"-405.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">ROOT</text>\n</g>\n<!-- 2 -->\n<g id=\"node3\" class=\"node\">\n<title>2</title>\n<text text-anchor=\"middle\" x=\"53.5\" y=\"-275.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">2 (развития)</text>\n</g>\n<!-- 1&#45;&gt;2 -->\n<g id=\"edge2\" class=\"edge\">\n<title>1&#45;&gt;2</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M89.176,-347.9735C82.9009,-335.8418 74.5148,-319.6287 67.4499,-305.9698\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"70.5151,-304.2776 62.8121,-297.0034 64.2976,-307.4935 70.5151,-304.2776\"/>\n<text text-anchor=\"middle\" x=\"96.5\" y=\"-318.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">nmod</text>\n</g>\n<!-- 6 -->\n<g id=\"node4\" class=\"node\">\n<title>6</title>\n<text text-anchor=\"middle\" x=\"144.5\" y=\"-275.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">6 (.)</text>\n</g>\n<!-- 1&#45;&gt;6 -->\n<g id=\"edge3\" class=\"edge\">\n<title>1&#45;&gt;6</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M108.0312,-347.9735C114.4457,-335.8418 123.0182,-319.6287 130.2401,-305.9698\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"133.4008,-307.4797 134.981,-297.0034 127.2126,-304.2077 133.4008,-307.4797\"/>\n<text text-anchor=\"middle\" x=\"140\" y=\"-318.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">punct</text>\n</g>\n<!-- 3 -->\n<g id=\"node5\" class=\"node\">\n<title>3</title>\n<text text-anchor=\"middle\" x=\"53.5\" y=\"-188.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">3 (сферы)</text>\n</g>\n<!-- 2&#45;&gt;3 -->\n<g id=\"edge4\" class=\"edge\">\n<title>2&#45;&gt;3</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M53.5,-260.9735C53.5,-249.1918 53.5,-233.5607 53.5,-220.1581\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"57.0001,-220.0033 53.5,-210.0034 50.0001,-220.0034 57.0001,-220.0033\"/>\n<text text-anchor=\"middle\" x=\"70.5\" y=\"-231.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">nmod</text>\n</g>\n<!-- 5 -->\n<g id=\"node6\" class=\"node\">\n<title>5</title>\n<text text-anchor=\"middle\" x=\"53.5\" y=\"-101.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">5 (технологий)</text>\n</g>\n<!-- 3&#45;&gt;5 -->\n<g id=\"edge5\" class=\"edge\">\n<title>3&#45;&gt;5</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M53.5,-173.9735C53.5,-162.1918 53.5,-146.5607 53.5,-133.1581\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"57.0001,-133.0033 53.5,-123.0034 50.0001,-133.0034 57.0001,-133.0033\"/>\n<text text-anchor=\"middle\" x=\"70.5\" y=\"-144.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">nmod</text>\n</g>\n<!-- 4 -->\n<g id=\"node7\" class=\"node\">\n<title>4</title>\n<text text-anchor=\"middle\" x=\"53.5\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">4 (высоких)</text>\n</g>\n<!-- 5&#45;&gt;4 -->\n<g id=\"edge6\" class=\"edge\">\n<title>5&#45;&gt;4</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M53.5,-86.9735C53.5,-75.1918 53.5,-59.5607 53.5,-46.1581\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"57.0001,-46.0033 53.5,-36.0034 50.0001,-46.0034 57.0001,-46.0033\"/>\n<text text-anchor=\"middle\" x=\"70\" y=\"-57.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">amod</text>\n</g>\n</g>\n</svg>\n"},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"rcOwDq7Mqx-_","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1569788358181,"user_tz":-180,"elapsed":734,"user":{"displayName":"Мария Шеянова","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mD0HLmel66wCQ2LALQesDMMokfEXTr_sSERNbqUsw=s64","userId":"13414369628864094336"}},"outputId":"a9eb087a-d5af-4713-c5dc-ecfb5504f68c"},"source":["tree = graph.tree()\n","print(tree.pretty_print())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Перспективы           \n","  _______|__________       \n"," |               развития \n"," |                  |      \n"," |                сферы   \n"," |                  |      \n"," |              технологий\n"," |                  |      \n"," .               высоких  \n","\n","None\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"JpfIz2Dxqx_B"},"source":["## UDPipe\n","\n","Есть разные инструменты для парсинга зависимостей. Сегодня мы будем рабтать с [UDPipe](http://ufal.mff.cuni.cz/udpipe). UDPipe умеет парсить текст с помощью готовых моделей (которые можно скачать [здесь](https://github.com/jwijffels/udpipe.models.ud.2.0/tree/master/inst/udpipe-ud-2.0-170801)) и обучать модели на своих трибанках.\n","\n","Собственно, в UDPipe есть три вида моделей:\n","* токенизатор (разделить предложение не токены, сделать заготовку для CoNLL-U)\n","* тэггер (разметить части речи)\n","* сам парсер (проставить каждому токену `head` и `deprel`)\n","\n","Мы сегодня не будем обучать новых моделей (это слишком долго), а используем готовую модель для русского."]},{"cell_type":"markdown","metadata":{"id":"eTCp_H5jqx_D"},"source":["### The Python binding\n","\n","У udpipe есть питоновская обвязка. Она довольно [плохо задокументирована](https://pypi.org/project/ufal.udpipe/), но зато можно использовать прямо в питоне :)"]},{"cell_type":"code","metadata":{"id":"ZV2jjMYDqx_E","colab":{"base_uri":"https://localhost:8080/","height":208},"executionInfo":{"status":"ok","timestamp":1569788994291,"user_tz":-180,"elapsed":87597,"user":{"displayName":"Мария Шеянова","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mD0HLmel66wCQ2LALQesDMMokfEXTr_sSERNbqUsw=s64","userId":"13414369628864094336"}},"outputId":"26192927-5a7f-4e54-9f18-fbcd0778fd79"},"source":["!pip3 install ufal.udpipe"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting ufal.udpipe\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/99/1a/9fbf9658cb3a24bfa2e462b4fda554f48b6fe7a7ee44f5036b1f7d181ca8/ufal.udpipe-1.2.0.2.tar.gz (307kB)\n","\u001b[K     |████████████████████████████████| 317kB 5.0MB/s \n","\u001b[?25hBuilding wheels for collected packages: ufal.udpipe\n","  Building wheel for ufal.udpipe (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for ufal.udpipe: filename=ufal.udpipe-1.2.0.2-cp36-cp36m-linux_x86_64.whl size=5610837 sha256=c0ee0e066fdc0567d507cdcb0290676254cc1b4de31d43928ca93cbfe2a66216\n","  Stored in directory: /root/.cache/pip/wheels/4e/a7/12/e21d1deb9818d501b525bae14432a0f1ced83c5ba47e490850\n","Successfully built ufal.udpipe\n","Installing collected packages: ufal.udpipe\n","Successfully installed ufal.udpipe-1.2.0.2\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"xGhtNKHxqx_I"},"source":["from ufal.udpipe import Model, Pipeline"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sbOLO7VDqx_L"},"source":["model = Model.load(\"russian-ud-2.0-170801.udpipe\") # path to the model"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BPaAPYVeqx_O","outputId":"2ca5eafb-fb4d-4fb0-9277-df1e42366869"},"source":["!pwd"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/home/maryszmary/Documents/hse-nlp/seminars\r\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"hlCCc1Usqx_T","outputId":"83f2c0dc-b78c-42b0-9d3a-215bac620720"},"source":["# если успех, должно быть так (model != None)\n","model"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Swig Object of type 'model *' at 0x7fb5e8143dc0>"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"QSfKdDagqx_Z","outputId":"74922561-29a7-4aa0-e905-53fb76dd5192"},"source":["pipeline = Pipeline(model, 'generic_tokenizer', '', '', '')\n","example = \"Если бы мне платили каждый раз. Каждый раз, когда я думаю о тебе.\"\n","parsed = pipeline.process(example)\n","print(parsed)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["# newdoc\n","# newpar\n","# sent_id = 1\n","# text = Если бы мне платили каждый раз.\n","1\tЕсли\tЕСЛИ\tSCONJ\tIN\t_\t4\tmark\t_\t_\n","2\tбы\tБЫ\tPART\tRP\t_\t4\tdiscourse\t_\t_\n","3\tмне\tЯ\tPRON\tPRP\tCase=Dat|Number=Sing|Person=1\t4\tiobj\t_\t_\n","4\tплатили\tПЛАТИТЬ\tVERB\tVBC\tAspect=Imp|Mood=Ind|Number=Plur|Tense=Past|VerbForm=Fin\t0\troot\t_\t_\n","5\tкаждый\tКАЖДЫЙ\tDET\tDT\tAnimacy=Inan|Case=Acc|Gender=Masc|Number=Sing\t6\tamod\t_\t_\n","6\tраз\tРАЗ\tNOUN\tNN\tAnimacy=Inan|Case=Acc|Gender=Masc|Number=Sing\t4\tadvmod\t_\tSpaceAfter=No\n","7\t.\t.\tPUNCT\t.\t_\t4\tpunct\t_\t_\n","\n","# sent_id = 2\n","# text = Каждый раз, когда я думаю о тебе.\n","1\tКаждый\tКАЖДЫЙ\tDET\tDT\tAnimacy=Inan|Case=Acc|Gender=Masc|Number=Sing\t2\tamod\t_\t_\n","2\tраз\tРАЗ\tNOUN\tNN\tAnimacy=Inan|Case=Acc|Gender=Masc|Number=Sing\t6\tadvmod\t_\tSpaceAfter=No\n","3\t,\t,\tPUNCT\t,\t_\t6\tpunct\t_\t_\n","4\tкогда\tКОГДА\tADV\tWRB\t_\t6\tadvmod\t_\t_\n","5\tя\tЯ\tPRON\tPRP\tCase=Nom|Number=Sing|Person=1\t6\tnsubj\t_\t_\n","6\tдумаю\tдУМАТЬ\tVERB\tVBC\tAspect=Imp|Mood=Ind|Number=Sing|Person=1|Tense=Pres|VerbForm=Fin\t0\troot\t_\t_\n","7\tо\tО\tADP\tIN\t_\t8\tcase\t_\t_\n","8\tтебе\tТЫ\tPRON\tPRP\tCase=Dat|Number=Sing|Person=2\t6\tobl\t_\tSpaceAfter=No\n","9\t.\t.\tPUNCT\t.\t_\t6\tpunct\t_\tSpacesAfter=\\n\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"zdVCMvNPqx_c"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ftGGHeTtqx_f"},"source":["example = \"\"\"\n","#\ttext\t=\tЕсли\tбы\tмне\tплатили\tкаждый\tраз.\n","1\tЕсли\tЕСЛИ\tSCONJ\tIN\t_\t4\tmark\t_\t_\n","2\tбы\tБЫ\tPART\tRP\t_\t4\tdiscourse\t_\t_\n","3\tмне\tЯ\tPRON\tPRP\tCase=Dat|Number=Sing|Person=1\t_\t_\t_\t_\n","4\tплатили\tПЛАТИТЬ\tVERB\tVBC\tAspect=Imp|Mood=Ind|Number=Plur|Tense=Past|VerbForm=Fin\t0\troot\t_\t_\n","5\tкаждый\tКАЖДЫЙ\tDET\tDT\tAnimacy=Inan|Case=Acc|Gender=Masc|Number=Sing\t_\t_\t_\t_\n","6\tраз\tРАЗ\tNOUN\tNN\tAnimacy=Inan|Case=Acc|Gender=Masc|Number=Sing\t4\tadvmod\t_\tSpaceAfter=No\n","7\t.\t.\tPUNCT\t.\t_\t_\t_\t_\t_\n","\"\"\""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QavSMAJWqx_i","outputId":"0fb2c61b-31b6-4e92-b25e-399d0c75d632"},"source":["print(pipeline.process(example))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["#\ttext\t=\tЕсли\tбы\tмне\tплатили\tкаждый\tраз.\n","1\tЕсли\tЕСЛИ\tSCONJ\tIN\t_\t4\tmark\t_\t_\n","2\tбы\tБЫ\tPART\tRP\t_\t4\tdiscourse\t_\t_\n","3\tмне\tЯ\tPRON\tPRP\tCase=Dat|Number=Sing|Person=1\t4\tiobj\t_\t_\n","4\tплатили\tПЛАТИТЬ\tVERB\tVBC\tAspect=Imp|Mood=Ind|Number=Plur|Tense=Past|VerbForm=Fin\t0\troot\t_\t_\n","5\tкаждый\tКАЖДЫЙ\tDET\tDT\tAnimacy=Inan|Case=Acc|Gender=Masc|Number=Sing\t6\tamod\t_\t_\n","6\tраз\tРАЗ\tNOUN\tNN\tAnimacy=Inan|Case=Acc|Gender=Masc|Number=Sing\t4\tadvmod\t_\tSpaceAfter=No\n","7\t.\t.\tPUNCT\t.\t_\t4\tpunct\t_\t_\n","\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"GtYHJ3OPqx_l"},"source":["Как видим, UDPipe и токенизировал, и лематизировал текст, сделал POS-tagging и, собственно, синтаксический парсинг."]},{"cell_type":"markdown","metadata":{"id":"G-TgFSXaqx_p"},"source":["### Command line interface\n","\n","Но с обвязкой бывают проблемы, и вообще довольно удобно пользоваться прекомпилированной утилитой `udpipe` из шелла. Она скачивается [здесь](https://github.com/ufal/udpipe/releases/tag/v1.2.0): (надеюсь, вы уже скачали всё заранее).<br>Внутри бинарники для всех популярных ОС, выбираем свою. У меня путь к бинарнику такой: `~/Documents/udpipe-1.2.0-bin/bin-linux64`.\n","\n","Синтаксис:"]},{"cell_type":"code","metadata":{"id":"F4-wHWqTqx_t","outputId":"6f5e9cc4-c3ec-40b9-96dd-8693203625c6"},"source":["! udpipe"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Usage: udpipe [running_opts] model_file [input_files]\r\n","       udpipe --train [training_opts] model_file [input_files]\r\n","       udpipe --detokenize [detokenize_opts] raw_text_file [input_files]\r\n","Running opts: --accuracy (measure accuracy only)\r\n","              --input=[conllu|generic_tokenizer|horizontal|vertical]\r\n","              --immediate (process sentences immediately during loading)\r\n","              --outfile=output file template\r\n","              --output=[conllu|epe|matxin|horizontal|plaintext|vertical]\r\n","              --tokenize (perform tokenization)\r\n","              --tokenizer=tokenizer options, implies --tokenize\r\n","              --tag (perform tagging)\r\n","              --tagger=tagger options, implies --tag\r\n","              --parse (perform parsing)\r\n","              --parser=parser options, implies --parse\r\n","Training opts: --method=[morphodita_parsito] which method to use\r\n","               --heldout=heldout data file name\r\n","               --tokenizer=tokenizer options\r\n","               --tagger=tagger options\r\n","               --parser=parser options\r\n","Detokenize opts: --outfile=output file template\r\n","Generic opts: --version\r\n","              --help\r\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"PEcbbcp4qx_y"},"source":["Нас сегодня будет интересовать только парсинг, так что типичная команда будет выглядеть так:"]},{"cell_type":"code","metadata":{"id":"jJyqYio-qx_z","outputId":"9d96c1a5-3552-4dbc-e1cb-1106549aa329"},"source":["with open('example.txt', 'w') as f:\n","    f.write(example)\n","\n","! udpipe --tokenize --tag --parse russian-ud-2.0-170801.udpipe example.txt > parsed_example.conllu\n","! cat parsed_example.conllu"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Loading UDPipe model: done.\n","# newdoc id = example.txt\n","# newpar\n","# sent_id = 1\n","# text = Если бы мне платили каждый раз.\n","1\tЕсли\tЕСЛИ\tSCONJ\tIN\t_\t4\tmark\t_\t_\n","2\tбы\tБЫ\tPART\tRP\t_\t4\tdiscourse\t_\t_\n","3\tмне\tЯ\tPRON\tPRP\tCase=Dat|Number=Sing|Person=1\t4\tiobj\t_\t_\n","4\tплатили\tПЛАТИТЬ\tVERB\tVBC\tAspect=Imp|Mood=Ind|Number=Plur|Tense=Past|VerbForm=Fin\t0\troot\t_\t_\n","5\tкаждый\tКАЖДЫЙ\tDET\tDT\tAnimacy=Inan|Case=Acc|Gender=Masc|Number=Sing\t6\tamod\t_\t_\n","6\tраз\tРАЗ\tNOUN\tNN\tAnimacy=Inan|Case=Acc|Gender=Masc|Number=Sing\t4\tadvmod\t_\tSpaceAfter=No\n","7\t.\t.\tPUNCT\t.\t_\t4\tpunct\t_\t_\n","\n","# sent_id = 2\n","# text = Каждый раз, когда я думаю о тебе.\n","1\tКаждый\tКАЖДЫЙ\tDET\tDT\tAnimacy=Inan|Case=Acc|Gender=Masc|Number=Sing\t2\tamod\t_\t_\n","2\tраз\tРАЗ\tNOUN\tNN\tAnimacy=Inan|Case=Acc|Gender=Masc|Number=Sing\t6\tadvmod\t_\tSpaceAfter=No\n","3\t,\t,\tPUNCT\t,\t_\t6\tpunct\t_\t_\n","4\tкогда\tКОГДА\tADV\tWRB\t_\t6\tadvmod\t_\t_\n","5\tя\tЯ\tPRON\tPRP\tCase=Nom|Number=Sing|Person=1\t6\tnsubj\t_\t_\n","6\tдумаю\tдУМАТЬ\tVERB\tVBC\tAspect=Imp|Mood=Ind|Number=Sing|Person=1|Tense=Pres|VerbForm=Fin\t0\troot\t_\t_\n","7\tо\tО\tADP\tIN\t_\t8\tcase\t_\t_\n","8\tтебе\tТЫ\tPRON\tPRP\tCase=Dat|Number=Sing|Person=2\t6\tobl\t_\tSpaceAfter=No\n","9\t.\t.\tPUNCT\t.\t_\t6\tpunct\t_\tSpacesAfter=\\n\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"2Yq6c0yvqx_3"},"source":["(Ну а потом снова считываем проанализированные предложения питоном).\n","\n","Вот два способа работать с UDPipe. Choose your fighter! "]},{"cell_type":"markdown","metadata":{"id":"QwY7znojqx_3"},"source":["#### Задание\n","\n","Напишите функцию, которая проверяет, не состоит ли предложение из большого числа однородных предложений."]},{"cell_type":"code","metadata":{"id":"2o5yl00-qx_4"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5pZUIswnqx_6"},"source":["## SVO-triples\n","\n","С помощью синтекстического парсинга можно извлекать из предложений тройки субъект-объект-глагол, которые можно использовать для извлечения информации из текста.  "]},{"cell_type":"code","metadata":{"id":"5yQ-28tgqx_7"},"source":["sent = \"\"\"1\tСобянин\t_\tNOUN\t_\tAnimacy=Anim|Case=Nom|Gender=Masc|Number=Sing|fPOS=NOUN++\t2\tnsubj\t_\t_\n","2\tоткрыл\t_\tVERB\t_\tAspect=Perf|Gender=Masc|Mood=Ind|Number=Sing|Tense=Past|VerbForm=Fin|Voice=Act|fPOS=VERB++\t0\tROOT\t_\t_\n","3\tновый\t_\tADJ\t_\tAnimacy=Inan|Case=Acc|Degree=Pos|Gender=Masc|Number=Sing|fPOS=ADJ++\t4\tamod\t_\t_\n","4\tпарк\t_\tNOUN\t_\tAnimacy=Inan|Case=Acc|Gender=Masc|Number=Sing|fPOS=NOUN++\t2\tdobj\t_\t_\n","5\tи\t_\tCONJ\t_\tfPOS=CONJ++\t4\tcc\t_\t_\n","6\tдетскую\t_\tADJ\t_\tCase=Acc|Degree=Pos|Gender=Fem|Number=Sing|fPOS=ADJ++\t7\tamod\t_\t_\n","7\tплощадку\t_\tNOUN\t_\tAnimacy=Inan|Case=Acc|Gender=Fem|Number=Sing|fPOS=NOUN++\t4\tconj\t_\t_\n","8\t.\t_\tPUNCT\t.\tfPOS=PUNCT++.\t2\tpunct\t_\t_\"\"\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wnApzRQ3qx_9"},"source":["Тройки слово-слово-связь:"]},{"cell_type":"code","metadata":{"id":"LBQZsN37qyAB","outputId":"1c24dd74-e40e-43ed-c863-426474dc0c64"},"source":["graph = DependencyGraph(tree_str=sent)\n","list(graph.triples())"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(('открыл', 'VERB'), 'nsubj', ('Собянин', 'NOUN')),\n"," (('открыл', 'VERB'), 'dobj', ('парк', 'NOUN')),\n"," (('парк', 'NOUN'), 'amod', ('новый', 'ADJ')),\n"," (('парк', 'NOUN'), 'cc', ('и', 'CONJ')),\n"," (('парк', 'NOUN'), 'conj', ('площадку', 'NOUN')),\n"," (('площадку', 'NOUN'), 'amod', ('детскую', 'ADJ')),\n"," (('открыл', 'VERB'), 'punct', ('.', 'PUNCT'))]"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"markdown","metadata":{"id":"DdPZtScwqyAE"},"source":["Тройки субьект-объект-глагол:"]},{"cell_type":"code","metadata":{"id":"yuIKjSgZqyAE","outputId":"1de875d2-e15d-449d-eae6-8957d7254029"},"source":["def get_sov(sent):\n","    graph = DependencyGraph(tree_str=sent)\n","    sov = {}\n","    for triple in graph.triples():\n","        if triple:\n","            if triple[0][1] == 'VERB':\n","                sov[triple[0][0]] = {'subj':'','obj':''}\n","    for triple in graph.triples():\n","        if triple:\n","            if triple[1] == 'nsubj':\n","                if triple[0][1] == 'VERB':\n","                    sov[triple[0][0]]['subj']  = triple[2][0]\n","            if triple[1] == 'dobj':\n","                if triple[0][1] == 'VERB':\n","                    sov[triple[0][0]]['obj'] = triple[2][0]\n","    return sov\n","\n","sov = get_sov(sent)\n","print(sov)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["{'открыл': {'obj': 'парк', 'subj': 'Собянин'}}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"nzdBGpnaqyAH"},"source":["#### Задание\n","\n","Измените код выше так, чтобы учитывались:\n","    1. Однородные члены предложения \n","        * (парк, площадка), (Германия, Щвейцария)\n","    2. Сложные сказуемые \n","        * (начнет продавать), (запретил провозить)\n","    3. Непрямые объекты\n","        * (едет, Польшу), (спел, скандале)"]},{"cell_type":"code","metadata":{"id":"WLSxOkgMqyAH"},"source":[""],"execution_count":null,"outputs":[]}]}